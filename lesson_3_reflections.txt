When would you want to create a remote repository rather than keeping all
your work local?

If you are working on a project, sometimes you might want to use a home
computer and sometimes a work computer. Having a remote repository where you
can pull and push changes will allow you to work in both. Also, if several
people are collaborating on a project, then having a remote repository will
allow everyone to work and merge their changes into a master repository on
GitHub.
===================================
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

While you are working on a project fixing a bug or adding a feature, you
wouldn't want Git to automatically pull from the remote repository because
you would want to have a known base that you could work on, not a constantly
changing code base. When you have logically added all the changes you needed to make on your local repository, then that's when you might decide to do a
manual pull.
===================================
Describe the differences between forks, clones, and branches. When would you
use one instead of another?

You use a fork to copy someone's GitHub repository into a repository under
your own GitHub account. You would want to use fork to make changes to
a repository on GitHub that you don't have a permission to change. On the other hand, you can use clone to behave like a fork, but clone will only
apply to your local repositories on your computer. You could also clone
GitHub repositories to your local computer. Branches will allow you to
fix a bug or add a feature on a branch of the tree that is not the master
branch. Branching will allow you to control when you can logically merge
your changes back to the master branch. Branch allows you to collaborate
with other people in a team or individually to only roll out stable and
tested code.
===================================
What is the benefit of having a copy of the last known state of the remote stored locally?
The benefit of having the last known state of the remote is that it allows for collaborative work to happen. By knowing the last known state of the remote, you can fetch the latest version of the remote to your local branch, merge your local changes to the remote branch, and then push it all back
to the remote on GitHub.
===================================